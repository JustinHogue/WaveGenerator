
WaveGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800066c  0800066c  0001066c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800067c  0800067c  0001067c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000680  08000680  00010680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010684  2**0
                  CONTENTS
  7 .bss          00000038  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000038  20000038  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010684  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001223  00000000  00000000  000106b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000004ac  00000000  00000000  000118d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000138  00000000  00000000  00011d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00011ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000009e4  00000000  00000000  00011fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000005f1  00000000  00000000  00012984  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00012f75  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000002d8  00000000  00000000  00012ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000132cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000654 	.word	0x08000654

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000654 	.word	0x08000654

080001c8 <dac_init>:
#include <dac.h>
#include "stm32f4xx.h"
#include "macro_utiles.h"


void dac_init(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= BIT0; // GPIOA clock enable
 80001cc:	4a11      	ldr	r2, [pc, #68]	; (8000214 <dac_init+0x4c>)
 80001ce:	4b11      	ldr	r3, [pc, #68]	; (8000214 <dac_init+0x4c>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= BIT29; // DAC clock enable
 80001d8:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <dac_init+0x4c>)
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <dac_init+0x4c>)
 80001dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80001e2:	6413      	str	r3, [r2, #64]	; 0x40
	DAC->CR |= BIT0; // Enable DAC1
 80001e4:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <dac_init+0x50>)
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <dac_init+0x50>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
	DAC->CR |= BIT1; // Enable DAC1 output buffer
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <dac_init+0x50>)
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <dac_init+0x50>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6013      	str	r3, [r2, #0]
	DAC->CR |= BIT12; // DAC DMA enable
 80001fc:	4a06      	ldr	r2, [pc, #24]	; (8000218 <dac_init+0x50>)
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <dac_init+0x50>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40023800 	.word	0x40023800
 8000218:	40007400 	.word	0x40007400

0800021c <dac_value>:

void dac_value(uint32_t value){
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	DAC->DHR12R1 = value;
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <dac_value+0x1c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	6093      	str	r3, [r2, #8]
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40007400 	.word	0x40007400

0800023c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
  uart_init_uart();
 8000242:	f000 f965 	bl	8000510 <uart_init_uart>
  dac_init();
 8000246:	f7ff ffbf 	bl	80001c8 <dac_init>

  char latest_byte;
  uint32_t dac_values[4] = {0, 1000, 2000, 3000};
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <main+0x5c>)
 800024c:	f107 0408 	add.w	r4, r7, #8
 8000250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t i = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
  volatile uint32_t j;

  while (1)
  {
	  i = (i + 1) % 4;
 800025a:	69fb      	ldr	r3, [r7, #28]
 800025c:	3301      	adds	r3, #1
 800025e:	f003 0303 	and.w	r3, r3, #3
 8000262:	61fb      	str	r3, [r7, #28]
	  dac_value(dac_values[i]);
 8000264:	69fb      	ldr	r3, [r7, #28]
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	f107 0220 	add.w	r2, r7, #32
 800026c:	4413      	add	r3, r2
 800026e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffd2 	bl	800021c <dac_value>
	  if (uart_get_received_byte(&latest_byte)) {
 8000278:	f107 031b 	add.w	r3, r7, #27
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f993 	bl	80005a8 <uart_get_received_byte>
		  // Treat the received byte;
	  }
	  for(j = 0; j < 1000000; j++);
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	e002      	b.n	800028e <main+0x52>
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3301      	adds	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a02      	ldr	r2, [pc, #8]	; (800029c <main+0x60>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d9f8      	bls.n	8000288 <main+0x4c>
	  i = (i + 1) % 4;
 8000296:	e7e0      	b.n	800025a <main+0x1e>
 8000298:	0800066c 	.word	0x0800066c
 800029c:	000f423f 	.word	0x000f423f

080002a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002a6:	e003      	b.n	80002b0 <LoopCopyDataInit>

080002a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ae:	3104      	adds	r1, #4

080002b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002b0:	480b      	ldr	r0, [pc, #44]	; (80002e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002b8:	d3f6      	bcc.n	80002a8 <CopyDataInit>
  ldr  r2, =_sbss
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002bc:	e002      	b.n	80002c4 <LoopFillZerobss>

080002be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002c0:	f842 3b04 	str.w	r3, [r2], #4

080002c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002c8:	d3f9      	bcc.n	80002be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002ca:	f000 f841 	bl	8000350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ce:	f000 f99d 	bl	800060c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002d2:	f7ff ffb3 	bl	800023c <main>
  bx  lr    
 80002d6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002dc:	08000684 	.word	0x08000684
  ldr  r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80002ec:	20000038 	.word	0x20000038

080002f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>

080002f2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000304:	e7fe      	b.n	8000304 <HardFault_Handler+0x4>

08000306 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800030a:	e7fe      	b.n	800030a <MemManage_Handler+0x4>

0800030c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000310:	e7fe      	b.n	8000310 <BusFault_Handler+0x4>

08000312 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000316:	e7fe      	b.n	8000316 <UsageFault_Handler+0x4>

08000318 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <SystemInit+0x60>)
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <SystemInit+0x60>)
 8000358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800035c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000364:	4a13      	ldr	r2, [pc, #76]	; (80003b4 <SystemInit+0x64>)
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <SystemInit+0x64>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <SystemInit+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000376:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <SystemInit+0x64>)
 8000378:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <SystemInit+0x64>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000384:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <SystemInit+0x64>)
 8000388:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <SystemInit+0x68>)
 800038a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800038c:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <SystemInit+0x64>)
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <SystemInit+0x64>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000396:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <SystemInit+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800039e:	f000 f80d 	bl	80003bc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003a2:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <SystemInit+0x60>)
 80003a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003a8:	609a      	str	r2, [r3, #8]
#endif
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	40023800 	.word	0x40023800
 80003b8:	24003010 	.word	0x24003010

080003bc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	2300      	movs	r3, #0
 80003c8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003ca:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <SetSysClock+0xe8>)
 80003cc:	4b35      	ldr	r3, [pc, #212]	; (80004a4 <SetSysClock+0xe8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003d4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003d6:	4b33      	ldr	r3, [pc, #204]	; (80004a4 <SetSysClock+0xe8>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003de:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3301      	adds	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d103      	bne.n	80003f4 <SetSysClock+0x38>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003f2:	d1f0      	bne.n	80003d6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003f4:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <SetSysClock+0xe8>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d002      	beq.n	8000406 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000400:	2301      	movs	r3, #1
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	e001      	b.n	800040a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000406:	2300      	movs	r3, #0
 8000408:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d142      	bne.n	8000496 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000410:	4a24      	ldr	r2, [pc, #144]	; (80004a4 <SetSysClock+0xe8>)
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <SetSysClock+0xe8>)
 8000414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800041c:	4a22      	ldr	r2, [pc, #136]	; (80004a8 <SetSysClock+0xec>)
 800041e:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <SetSysClock+0xec>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000426:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000428:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <SetSysClock+0xe8>)
 800042a:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <SetSysClock+0xe8>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000430:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <SetSysClock+0xe8>)
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <SetSysClock+0xe8>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800043a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800043c:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <SetSysClock+0xe8>)
 800043e:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <SetSysClock+0xe8>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000446:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <SetSysClock+0xe8>)
 800044a:	4a18      	ldr	r2, [pc, #96]	; (80004ac <SetSysClock+0xf0>)
 800044c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800044e:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <SetSysClock+0xe8>)
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <SetSysClock+0xe8>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000458:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800045a:	bf00      	nop
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <SetSysClock+0xe8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000464:	2b00      	cmp	r3, #0
 8000466:	d0f9      	beq.n	800045c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SetSysClock+0xf4>)
 800046a:	f240 7205 	movw	r2, #1797	; 0x705
 800046e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000470:	4a0c      	ldr	r2, [pc, #48]	; (80004a4 <SetSysClock+0xe8>)
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <SetSysClock+0xe8>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f023 0303 	bic.w	r3, r3, #3
 800047a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <SetSysClock+0xe8>)
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <SetSysClock+0xe8>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000488:	bf00      	nop
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <SetSysClock+0xe8>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f003 030c 	and.w	r3, r3, #12
 8000492:	2b08      	cmp	r3, #8
 8000494:	d1f9      	bne.n	800048a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40007000 	.word	0x40007000
 80004ac:	07405419 	.word	0x07405419
 80004b0:	40023c00 	.word	0x40023c00

080004b4 <USART2_IRQHandler>:
/*
 * INTERRUPT HANDLER
 */

void USART2_IRQHandler()
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_FLAG_RXNE) {
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <USART2_IRQHandler+0x4c>)
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	f003 0320 	and.w	r3, r3, #32
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d017      	beq.n	80004f6 <USART2_IRQHandler+0x42>
		circular_buffer[head] = USART2->DR;
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <USART2_IRQHandler+0x50>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <USART2_IRQHandler+0x4c>)
 80004cc:	8892      	ldrh	r2, [r2, #4]
 80004ce:	b292      	uxth	r2, r2
 80004d0:	b2d1      	uxtb	r1, r2
 80004d2:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <USART2_IRQHandler+0x54>)
 80004d4:	54d1      	strb	r1, [r2, r3]
		head = (head + 1) % CIRCULAR_BUFFER_SIZE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <USART2_IRQHandler+0x50>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	1c59      	adds	r1, r3, #1
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <USART2_IRQHandler+0x58>)
 80004de:	fb83 2301 	smull	r2, r3, r3, r1
 80004e2:	10da      	asrs	r2, r3, #3
 80004e4:	17cb      	asrs	r3, r1, #31
 80004e6:	1ad2      	subs	r2, r2, r3
 80004e8:	4613      	mov	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	1aca      	subs	r2, r1, r3
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <USART2_IRQHandler+0x50>)
 80004f4:	601a      	str	r2, [r3, #0]
	}
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40004400 	.word	0x40004400
 8000504:	20000030 	.word	0x20000030
 8000508:	2000001c 	.word	0x2000001c
 800050c:	66666667 	.word	0x66666667

08000510 <uart_init_uart>:
/*
 * FUNCTIONS
 */

void uart_init_uart()
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

	NVIC->ISER[1] |= BIT6; // Enable USART2 global interrupt
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <uart_init_uart+0x88>)
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <uart_init_uart+0x88>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800051e:	6053      	str	r3, [r2, #4]
	RCC->APB1ENR |= BIT17; // Enable USART2 clock
 8000520:	4a1e      	ldr	r2, [pc, #120]	; (800059c <uart_init_uart+0x8c>)
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <uart_init_uart+0x8c>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40

	RCC->AHB1ENR |= BIT0; // GPIOA clock
 800052c:	4a1b      	ldr	r2, [pc, #108]	; (800059c <uart_init_uart+0x8c>)
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <uart_init_uart+0x8c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6313      	str	r3, [r2, #48]	; 0x30

	// set gpio mode, etc.
	GPIOA->MODER |= BIT5 | BIT7; // Alternate function for PA2 and PA3
 8000538:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <uart_init_uart+0x90>)
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <uart_init_uart+0x90>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000542:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (0b0111 << 8) | (0b0111 << 12); // Alternate function 7: USART1-3
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <uart_init_uart+0x90>)
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <uart_init_uart+0x90>)
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800054e:	6213      	str	r3, [r2, #32]

	USART2->CR1 &= ~BIT12; // 8 data bits
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <uart_init_uart+0x94>)
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <uart_init_uart+0x94>)
 8000554:	899b      	ldrh	r3, [r3, #12]
 8000556:	b29b      	uxth	r3, r3
 8000558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800055c:	b29b      	uxth	r3, r3
 800055e:	8193      	strh	r3, [r2, #12]

	USART2->CR1 |=
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <uart_init_uart+0x94>)
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <uart_init_uart+0x94>)
 8000564:	899b      	ldrh	r3, [r3, #12]
 8000566:	b29b      	uxth	r3, r3
 8000568:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800056c:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000570:	b29b      	uxth	r3, r3
 8000572:	8193      	strh	r3, [r2, #12]
			BIT5 | // RXNE interrupt enable
			BIT3 | // Transmitter enable TODO: avoid transmitting
			BIT2 // Receiver enable
			;

	USART2->CR2 &= ~(BIT12 | BIT13); // 1 stop bit
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <uart_init_uart+0x94>)
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <uart_init_uart+0x94>)
 8000578:	8a1b      	ldrh	r3, [r3, #16]
 800057a:	b29b      	uxth	r3, r3
 800057c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000580:	b29b      	uxth	r3, r3
 8000582:	8213      	strh	r3, [r2, #16]

	// set baud rate
	USART2->BRR = (BAUD_RATE_MANTISSA << 4) | (BAUD_RATE_FRACTION & 0b1111);
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <uart_init_uart+0x94>)
 8000586:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800058a:	811a      	strh	r2, [r3, #8]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020000 	.word	0x40020000
 80005a4:	40004400 	.word	0x40004400

080005a8 <uart_get_received_byte>:

int uart_get_received_byte(char* buffer) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if (head != tail) {
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <uart_get_received_byte+0x54>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <uart_get_received_byte+0x58>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d017      	beq.n	80005ec <uart_get_received_byte+0x44>
		(*buffer) = circular_buffer[tail];
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <uart_get_received_byte+0x58>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a10      	ldr	r2, [pc, #64]	; (8000604 <uart_get_received_byte+0x5c>)
 80005c2:	5cd2      	ldrb	r2, [r2, r3]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	701a      	strb	r2, [r3, #0]
		tail = (tail + 1) % CIRCULAR_BUFFER_SIZE;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <uart_get_received_byte+0x58>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1c59      	adds	r1, r3, #1
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <uart_get_received_byte+0x60>)
 80005d0:	fb83 2301 	smull	r2, r3, r3, r1
 80005d4:	10da      	asrs	r2, r3, #3
 80005d6:	17cb      	asrs	r3, r1, #31
 80005d8:	1ad2      	subs	r2, r2, r3
 80005da:	4613      	mov	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	1aca      	subs	r2, r1, r3
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <uart_get_received_byte+0x58>)
 80005e6:	601a      	str	r2, [r3, #0]
		return 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e000      	b.n	80005ee <uart_get_received_byte+0x46>
	} else {
		return 0;
 80005ec:	2300      	movs	r3, #0
	}
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000030 	.word	0x20000030
 8000600:	20000034 	.word	0x20000034
 8000604:	2000001c 	.word	0x2000001c
 8000608:	66666667 	.word	0x66666667

0800060c <__libc_init_array>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	4e0d      	ldr	r6, [pc, #52]	; (8000644 <__libc_init_array+0x38>)
 8000610:	4c0d      	ldr	r4, [pc, #52]	; (8000648 <__libc_init_array+0x3c>)
 8000612:	1ba4      	subs	r4, r4, r6
 8000614:	10a4      	asrs	r4, r4, #2
 8000616:	2500      	movs	r5, #0
 8000618:	42a5      	cmp	r5, r4
 800061a:	d109      	bne.n	8000630 <__libc_init_array+0x24>
 800061c:	4e0b      	ldr	r6, [pc, #44]	; (800064c <__libc_init_array+0x40>)
 800061e:	4c0c      	ldr	r4, [pc, #48]	; (8000650 <__libc_init_array+0x44>)
 8000620:	f000 f818 	bl	8000654 <_init>
 8000624:	1ba4      	subs	r4, r4, r6
 8000626:	10a4      	asrs	r4, r4, #2
 8000628:	2500      	movs	r5, #0
 800062a:	42a5      	cmp	r5, r4
 800062c:	d105      	bne.n	800063a <__libc_init_array+0x2e>
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000634:	4798      	blx	r3
 8000636:	3501      	adds	r5, #1
 8000638:	e7ee      	b.n	8000618 <__libc_init_array+0xc>
 800063a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800063e:	4798      	blx	r3
 8000640:	3501      	adds	r5, #1
 8000642:	e7f2      	b.n	800062a <__libc_init_array+0x1e>
 8000644:	0800067c 	.word	0x0800067c
 8000648:	0800067c 	.word	0x0800067c
 800064c:	0800067c 	.word	0x0800067c
 8000650:	08000680 	.word	0x08000680

08000654 <_init>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr

08000660 <_fini>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr
